# -*- coding: utf-8 -*-
"""UNICORN_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U1SyyyM-H9fJTZl5Ba4Z-4qmFXQbZDU8

# **UNICORN Project preparation**

## **Installing and importing packages**
"""

# Imports
import pandas as pd
import sqlalchemy as sa

"""## **Creating and making a connection**"""

Unicorn_url = "postgresql://Test:bQNxVzJL4g6u@ep-noisy-flower-846766-pooler.us-east-2.aws.neon.tech/Unicorn"

# Creating engine nad making connection
engine = sa.create_engine(Unicorn_url)
connection = engine.connect().execution_options(isolation_level="AUTOCOMMIT")

"""# **Assignment: SQL Queries for Unicorn Team**

--------------------------------------------------------------------------------

### **1. How many customers do we have in the data?**
"""

query = """

SELECT
COUNT(DISTINCT customer_id) AS total_customers
FROM customers;

"""
pd.read_sql(sa.text(query),connection)

"""### **2. What was the city with the most profit for the company in 2015?**"""

query = """

SELECT
o.shipping_city,
SUM(od.order_profits) AS total_profit
FROM orders AS o
JOIN order_details AS od
	ON o.order_id = od.order_id
WHERE EXTRACT(YEAR FROM o.order_date) = 2015
GROUP BY o.shipping_city
ORDER BY total_profit DESC
LIMIT 1;

"""
pd.read_sql(sa.text(query),connection)

"""### **3. In 2015, what was the most profitable city's profit?**

"""

query = """

SELECT
SUM(order_profits) AS max_profit
FROM orders AS o
JOIN order_details AS od
	ON o.order_id = od.order_id
WHERE EXTRACT(YEAR FROM o.order_date) = 2015
GROUP BY o.shipping_city
ORDER BY max_profit DESC
LIMIT 1;

"""
pd.read_sql(sa.text(query),connection)

"""### **4. How many different cities do we have in the data? Please refer just to the city name and not similar city names in different states.**

"""

# We want to count the number of distinct city names, regardless of their state or region. Then that will return a single number representing how many different city names are in your data, without considering state or region differences.

query = """

SELECT
COUNT(DISTINCT shipping_city) AS distinct_city_count
FROM orders;

"""
pd.read_sql(sa.text(query),connection)

"""### **5. Show the total spent by customers from low to high.**

"""

# To show the total amount spent by each customer, ordered from low to high,
# we are joining the customers, orders, and order_details tables and sum the order_sales per customer.

query = """

SELECT
c.customer_id,
c.customer_name,
SUM(od.order_sales) AS total_spent
FROM customers AS c
JOIN orders AS o
	ON c.customer_id = o.customer_id
JOIN order_details AS od
	ON o.order_id = od.order_id
GROUP BY c.customer_id, c.customer_name
ORDER BY total_spent ASC;

"""
pd.read_sql (sa.text(query),connection)

# The result returns only 723 customers, because in our query uses INNER JOIn, which includes customers with at least one order.

# PROOF : We have 2 customers have never placed an order.

query = """

SELECT COUNT(*)
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
WHERE o.order_id IS NULL;

"""
pd.read_sql (sa.text(query),connection)

"""### **6. What is the most profitable city in the State of Tennessee?**"""

query = """

SELECT
o.shipping_city,
SUM(od.order_profits) AS total_profit
FROM orders AS o
JOIN order_details AS od
	ON o.order_id = od.order_id
WHERE o.shipping_state = 'Tennessee'
GROUP BY o.shipping_city
ORDER BY total_profit DESC
LIMIT 1;

"""
pd.read_sql (sa.text(query),connection)

"""### **7. What’s the average annual profit for that city across all years?**"""

query = """

SELECT
	ROUND(CAST (avg(order_profits) as NUMERIC),2) AS avg_profit
FROM order_details as od
JOIN orders as ord
	USING (order_id)
WHERE shipping_city = 'Lebanon'

"""
pd.read_sql (sa.text(query),connection)

"""### **8. What is the distribution of customer types in the data?**"""

query = """

SELECT
customer_segment,
COUNT(customer_id) AS customer_distribution
FROM customers
WHERE customer_segment = 'Consumer'
GROUP BY 1 ;

"""
pd.read_sql(sa.text(query),connection)

"""### **9. What’s the most profitable product category on average in Iowa across all years?**"""

query = """

WITH yearly_profits AS (
  SELECT
    p.product_category,
    EXTRACT(YEAR FROM o.order_date) AS year,
    SUM(od.order_profits) AS total_yearly_profit
  FROM orders AS o
  JOIN order_details AS od
  	ON o.order_id = od.order_id
  JOIN product AS p
  	ON od.product_id = p.product_id
  WHERE o.shipping_state = 'Iowa'
  GROUP BY p.product_category, year
)
SELECT
  product_category,
  AVG(total_yearly_profit) AS avg_annual_profit
FROM yearly_profits
GROUP BY product_category
ORDER BY avg_annual_profit DESC
LIMIT 1;

"""
pd.read_sql(sa.text(query),connection)

"""## **OR**"""

query = """

SELECT
		product_category
FROM product as pro
JOIN order_details as od
	USING(product_id)

JOIN orders as ord
	USING(order_id)

WHERE shipping_state = 'Iowa'
GROUP BY 1
ORDER BY avg(order_profits) DESC
LIMIT 1;

"""
pd.read_sql(sa.text(query),connection)

"""### **10. What is the most popular product in that category across all states in 2016?**"""

# We already know the most profitable product category (from previous analysis).
# Now, within that category, I am finding the most popular product (the one with highest quantity sold).
# Across all states.
# For the year 2016 only.

query = """

SELECT
    p.product_name,
    SUM(od.quantity) AS total_quantity_sold
FROM orders AS o
 JOIN order_details AS od
	ON o.order_id = od.order_id
 JOIN product AS p
	ON od.product_id = p.product_id
WHERE p.product_category = 'Furniture'
  AND EXTRACT(YEAR FROM o.order_date) = 2016
GROUP BY p.product_name
ORDER BY total_quantity_sold DESC
LIMIT 1;

"""
pd.read_sql(sa.text(query),connection)

"""### **11. Which customer got the most discount in the data? (in total amount)**"""

query = """

SELECT
  c.customer_id,
  c.customer_name,
  SUM((od.order_sales / (1 - od.order_discount)) - od.order_sales) AS total_discount
FROM orders o
JOIN order_details od ON o.order_id = od.order_id
JOIN customers c ON o.customer_id = c.customer_id
GROUP BY c.customer_id, c.customer_name
ORDER BY total_discount DESC
LIMIT 1;

"""
pd.read_sql(sa.text(query),connection)

"""### **12. How widely did monthly profits vary in 2018?**"""

# To understand how widely monthly profits varied in 2018,
# I have measured the spread or variability of profits per month within that year.

query = """

WITH MonthlyProfits AS (
   SELECT
       EXTRACT(MONTH FROM o.order_date) AS month,
       SUM(od.order_profits) AS month_total
   FROM
       orders o
   INNER JOIN
       order_details od ON o.order_id = od.order_id
   WHERE
       EXTRACT(YEAR FROM o.order_date) = 2018
   GROUP BY
       EXTRACT(MONTH FROM o.order_date)
)
SELECT
   month,
   month_total,
   month_total - LAG(month_total) OVER (ORDER BY month) AS month_difference
FROM MonthlyProfits
ORDER BY month;

"""
pd.read_sql(sa.text(query),connection)

"""### **13. Which was the biggest order regarding sales in 2015?**"""

query = """

SELECT
    o.order_id,
    SUM(od.order_sales) AS total_sales
FROM orders AS o
JOIN order_details AS od
	ON o.order_id = od.order_id
WHERE EXTRACT(YEAR FROM o.order_date) = 2015
GROUP BY o.order_id
ORDER BY total_sales DESC
LIMIT 1;

"""
pd.read_sql(sa.text(query),connection)

"""### **14. What was the rank of each city in the East region in 2015 in quantity?**"""

query = """

SELECT
    o.shipping_city,
    SUM(od.quantity) AS total_quantity,
    RANK() OVER (ORDER BY SUM(od.quantity) DESC) AS city_rank
FROM orders o
JOIN order_details od ON o.order_id = od.order_id
WHERE o.shipping_region = 'East'
  AND EXTRACT(YEAR FROM o.order_date) = 2015
GROUP BY o.shipping_city
ORDER BY city_rank
LIMIT 5;

"""
pd.read_sql(sa.text(query),connection)

"""### **15. Display customer names for customers who are in the segment ‘Consumer’ or ‘Corporate.’ How many customers are there in total?**

"""

query = """

SELECT
    customer_name,
    COUNT(*) OVER () AS total_customers
FROM customers
WHERE customer_segment IN ('Consumer', 'Corporate');

"""
pd.read_sql(sa.text(query),connection)

"""### **16. Calculate the difference between the largest and smallest order quantities for product id ‘100.’**

"""

query = """

SELECT
    MAX(quantity) - MIN(quantity) AS quantity_difference
FROM order_details
WHERE product_id = '100';

"""
pd.read_sql(sa.text(query),connection)

"""### **17. Calculate the percent of products that are within the category ‘Furniture'.**"""

query = """

SELECT
  ROUND((COUNT(*) * 100.0 / (SELECT COUNT(*) FROM product)),2) AS furniture_percentage
FROM product
WHERE product_category = 'Furniture';

"""
pd.read_sql(sa.text(query),connection)

"""### **18. Display the manufacturers with more than 1 product in the product table, with their number of products.**

"""

query = """

SELECT
    product_manufacturer,
    COUNT(product_id) as number_duplicate
FROM product
GROUP BY product_manufacturer
HAVING COUNT (product_id) > 1
LIMIT 5;

"""
pd.read_sql(sa.text(query),connection)

"""### **19. Show the product_subcategory and the total number of products in the subcategory. Order from most to least products and then by product_subcategory name ascending. What is the first subcategory in the table?**

"""

query = """

SELECT
  product_subcategory,
  COUNT(*) AS total_products
FROM product
GROUP BY product_subcategory
ORDER BY total_products DESC, product_subcategory ASC
LIMIT 1;

"""
pd.read_sql(sa.text(query),connection)

"""### **20. Show the product_id(s), the sum of quantities, where for each sale of product quantities is greater than or equal to 100.**"""

query = """

SELECT
  product_id,
  SUM(quantity) AS total_quantity
FROM order_details
WHERE (quantity) >= 100
GROUP BY product_id;

"""
pd.read_sql(sa.text(query),connection)

"""## **BONUS QUESTION**

### **Join all database tables into one dataset that includes all unique columns and download it as a .csv file.**
"""

query = """

SELECT
    c.customer_id, c.customer_name, c.customer_segment,
    o.order_id, o.order_date, o.shipping_city, o.shipping_state, o.shipping_region,o.shipping_country,o.shipping_postal_code,o.shipping_date,o.shipping_mode,
    od.order_details_id, od.quantity, od.order_discount, od.order_sales, od.order_profits ,od.order_profit_ratio,
    p.product_id, p.product_name, p.product_category, p.product_manufacturer, p.product_subcategory
FROM customers AS c
LEFT JOIN orders AS o on c.customer_id = o.customer_id
LEFT JOIN order_details AS od on o.order_id = od.order_id
LEFT JOIN product AS p on od.product_id = p.product_id

"""
pd.read_sql(sa.text(query),connection)